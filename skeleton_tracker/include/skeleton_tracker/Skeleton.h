/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/bee/robotak/nao/ros/src/skeleton_tracker/msg/Skeleton.msg
 *
 */


#ifndef SKELETON_TRACKER_MESSAGE_SKELETON_H
#define SKELETON_TRACKER_MESSAGE_SKELETON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace skeleton_tracker
{
template <class ContainerAllocator>
struct Skeleton_
{
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
    : head_x(0.0)
    , head_y(0.0)
    , head_z(0.0)
    , head_yaw(0.0)
    , head_pitch(0.0)
    , neck_x(0.0)
    , neck_y(0.0)
    , neck_z(0.0)
    , torso_x(0.0)
    , torso_y(0.0)
    , torso_z(0.0)
    , left_shoulder_x(0.0)
    , left_shoulder_y(0.0)
    , left_shoulder_z(0.0)
    , left_elbow_x(0.0)
    , left_elbow_y(0.0)
    , left_elbow_z(0.0)
    , left_hand_x(0.0)
    , left_hand_y(0.0)
    , left_hand_z(0.0)
    , left_hip_x(0.0)
    , left_hip_y(0.0)
    , left_hip_z(0.0)
    , left_knee_x(0.0)
    , left_knee_y(0.0)
    , left_knee_z(0.0)
    , left_foot_x(0.0)
    , left_foot_y(0.0)
    , left_foot_z(0.0)
    , right_shoulder_x(0.0)
    , right_shoulder_y(0.0)
    , right_shoulder_z(0.0)
    , right_elbow_x(0.0)
    , right_elbow_y(0.0)
    , right_elbow_z(0.0)
    , right_hand_x(0.0)
    , right_hand_y(0.0)
    , right_hand_z(0.0)
    , right_hip_x(0.0)
    , right_hip_y(0.0)
    , right_hip_z(0.0)
    , right_knee_x(0.0)
    , right_knee_y(0.0)
    , right_knee_z(0.0)
    , right_foot_x(0.0)
    , right_foot_y(0.0)
    , right_foot_z(0.0)  {
    }
  Skeleton_(const ContainerAllocator& _alloc)
    : head_x(0.0)
    , head_y(0.0)
    , head_z(0.0)
    , head_yaw(0.0)
    , head_pitch(0.0)
    , neck_x(0.0)
    , neck_y(0.0)
    , neck_z(0.0)
    , torso_x(0.0)
    , torso_y(0.0)
    , torso_z(0.0)
    , left_shoulder_x(0.0)
    , left_shoulder_y(0.0)
    , left_shoulder_z(0.0)
    , left_elbow_x(0.0)
    , left_elbow_y(0.0)
    , left_elbow_z(0.0)
    , left_hand_x(0.0)
    , left_hand_y(0.0)
    , left_hand_z(0.0)
    , left_hip_x(0.0)
    , left_hip_y(0.0)
    , left_hip_z(0.0)
    , left_knee_x(0.0)
    , left_knee_y(0.0)
    , left_knee_z(0.0)
    , left_foot_x(0.0)
    , left_foot_y(0.0)
    , left_foot_z(0.0)
    , right_shoulder_x(0.0)
    , right_shoulder_y(0.0)
    , right_shoulder_z(0.0)
    , right_elbow_x(0.0)
    , right_elbow_y(0.0)
    , right_elbow_z(0.0)
    , right_hand_x(0.0)
    , right_hand_y(0.0)
    , right_hand_z(0.0)
    , right_hip_x(0.0)
    , right_hip_y(0.0)
    , right_hip_z(0.0)
    , right_knee_x(0.0)
    , right_knee_y(0.0)
    , right_knee_z(0.0)
    , right_foot_x(0.0)
    , right_foot_y(0.0)
    , right_foot_z(0.0)  {
    }



   typedef float _head_x_type;
  _head_x_type head_x;

   typedef float _head_y_type;
  _head_y_type head_y;

   typedef float _head_z_type;
  _head_z_type head_z;

   typedef float _head_yaw_type;
  _head_yaw_type head_yaw;

   typedef float _head_pitch_type;
  _head_pitch_type head_pitch;

   typedef float _neck_x_type;
  _neck_x_type neck_x;

   typedef float _neck_y_type;
  _neck_y_type neck_y;

   typedef float _neck_z_type;
  _neck_z_type neck_z;

   typedef float _torso_x_type;
  _torso_x_type torso_x;

   typedef float _torso_y_type;
  _torso_y_type torso_y;

   typedef float _torso_z_type;
  _torso_z_type torso_z;

   typedef float _left_shoulder_x_type;
  _left_shoulder_x_type left_shoulder_x;

   typedef float _left_shoulder_y_type;
  _left_shoulder_y_type left_shoulder_y;

   typedef float _left_shoulder_z_type;
  _left_shoulder_z_type left_shoulder_z;

   typedef float _left_elbow_x_type;
  _left_elbow_x_type left_elbow_x;

   typedef float _left_elbow_y_type;
  _left_elbow_y_type left_elbow_y;

   typedef float _left_elbow_z_type;
  _left_elbow_z_type left_elbow_z;

   typedef float _left_hand_x_type;
  _left_hand_x_type left_hand_x;

   typedef float _left_hand_y_type;
  _left_hand_y_type left_hand_y;

   typedef float _left_hand_z_type;
  _left_hand_z_type left_hand_z;

   typedef float _left_hip_x_type;
  _left_hip_x_type left_hip_x;

   typedef float _left_hip_y_type;
  _left_hip_y_type left_hip_y;

   typedef float _left_hip_z_type;
  _left_hip_z_type left_hip_z;

   typedef float _left_knee_x_type;
  _left_knee_x_type left_knee_x;

   typedef float _left_knee_y_type;
  _left_knee_y_type left_knee_y;

   typedef float _left_knee_z_type;
  _left_knee_z_type left_knee_z;

   typedef float _left_foot_x_type;
  _left_foot_x_type left_foot_x;

   typedef float _left_foot_y_type;
  _left_foot_y_type left_foot_y;

   typedef float _left_foot_z_type;
  _left_foot_z_type left_foot_z;

   typedef float _right_shoulder_x_type;
  _right_shoulder_x_type right_shoulder_x;

   typedef float _right_shoulder_y_type;
  _right_shoulder_y_type right_shoulder_y;

   typedef float _right_shoulder_z_type;
  _right_shoulder_z_type right_shoulder_z;

   typedef float _right_elbow_x_type;
  _right_elbow_x_type right_elbow_x;

   typedef float _right_elbow_y_type;
  _right_elbow_y_type right_elbow_y;

   typedef float _right_elbow_z_type;
  _right_elbow_z_type right_elbow_z;

   typedef float _right_hand_x_type;
  _right_hand_x_type right_hand_x;

   typedef float _right_hand_y_type;
  _right_hand_y_type right_hand_y;

   typedef float _right_hand_z_type;
  _right_hand_z_type right_hand_z;

   typedef float _right_hip_x_type;
  _right_hip_x_type right_hip_x;

   typedef float _right_hip_y_type;
  _right_hip_y_type right_hip_y;

   typedef float _right_hip_z_type;
  _right_hip_z_type right_hip_z;

   typedef float _right_knee_x_type;
  _right_knee_x_type right_knee_x;

   typedef float _right_knee_y_type;
  _right_knee_y_type right_knee_y;

   typedef float _right_knee_z_type;
  _right_knee_z_type right_knee_z;

   typedef float _right_foot_x_type;
  _right_foot_x_type right_foot_x;

   typedef float _right_foot_y_type;
  _right_foot_y_type right_foot_y;

   typedef float _right_foot_z_type;
  _right_foot_z_type right_foot_z;




  typedef boost::shared_ptr< ::skeleton_tracker::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::skeleton_tracker::Skeleton_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton_

typedef ::skeleton_tracker::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::skeleton_tracker::Skeleton > SkeletonPtr;
typedef boost::shared_ptr< ::skeleton_tracker::Skeleton const> SkeletonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::skeleton_tracker::Skeleton_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::skeleton_tracker::Skeleton_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace skeleton_tracker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'skeleton_tracker': ['/home/bee/robotak/nao/ros/src/skeleton_tracker/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::skeleton_tracker::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::skeleton_tracker::Skeleton_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::skeleton_tracker::Skeleton_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfb1d8e773f443fbee77573621afd016";
  }

  static const char* value(const ::skeleton_tracker::Skeleton_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfb1d8e773f443fbULL;
  static const uint64_t static_value2 = 0xee77573621afd016ULL;
};

template<class ContainerAllocator>
struct DataType< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "skeleton_tracker/Skeleton";
  }

  static const char* value(const ::skeleton_tracker::Skeleton_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float32 head_x\n\
float32 head_y\n\
float32 head_z\n\
float32 head_yaw\n\
float32 head_pitch\n\
\n\
float32 neck_x\n\
float32 neck_y\n\
float32 neck_z\n\
\n\
float32 torso_x\n\
float32 torso_y\n\
float32 torso_z\n\
\n\
float32 left_shoulder_x\n\
float32 left_shoulder_y\n\
float32 left_shoulder_z\n\
\n\
float32 left_elbow_x\n\
float32 left_elbow_y\n\
float32 left_elbow_z\n\
\n\
float32 left_hand_x\n\
float32 left_hand_y\n\
float32 left_hand_z\n\
\n\
float32 left_hip_x\n\
float32 left_hip_y\n\
float32 left_hip_z\n\
\n\
float32 left_knee_x\n\
float32 left_knee_y\n\
float32 left_knee_z\n\
\n\
float32 left_foot_x\n\
float32 left_foot_y\n\
float32 left_foot_z\n\
\n\
float32 right_shoulder_x\n\
float32 right_shoulder_y\n\
float32 right_shoulder_z\n\
\n\
float32 right_elbow_x\n\
float32 right_elbow_y\n\
float32 right_elbow_z\n\
\n\
float32 right_hand_x\n\
float32 right_hand_y\n\
float32 right_hand_z\n\
\n\
float32 right_hip_x\n\
float32 right_hip_y\n\
float32 right_hip_z\n\
\n\
float32 right_knee_x\n\
float32 right_knee_y\n\
float32 right_knee_z\n\
\n\
float32 right_foot_x\n\
float32 right_foot_y\n\
float32 right_foot_z\n\
\n\
\n\
";
  }

  static const char* value(const ::skeleton_tracker::Skeleton_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head_x);
      stream.next(m.head_y);
      stream.next(m.head_z);
      stream.next(m.head_yaw);
      stream.next(m.head_pitch);
      stream.next(m.neck_x);
      stream.next(m.neck_y);
      stream.next(m.neck_z);
      stream.next(m.torso_x);
      stream.next(m.torso_y);
      stream.next(m.torso_z);
      stream.next(m.left_shoulder_x);
      stream.next(m.left_shoulder_y);
      stream.next(m.left_shoulder_z);
      stream.next(m.left_elbow_x);
      stream.next(m.left_elbow_y);
      stream.next(m.left_elbow_z);
      stream.next(m.left_hand_x);
      stream.next(m.left_hand_y);
      stream.next(m.left_hand_z);
      stream.next(m.left_hip_x);
      stream.next(m.left_hip_y);
      stream.next(m.left_hip_z);
      stream.next(m.left_knee_x);
      stream.next(m.left_knee_y);
      stream.next(m.left_knee_z);
      stream.next(m.left_foot_x);
      stream.next(m.left_foot_y);
      stream.next(m.left_foot_z);
      stream.next(m.right_shoulder_x);
      stream.next(m.right_shoulder_y);
      stream.next(m.right_shoulder_z);
      stream.next(m.right_elbow_x);
      stream.next(m.right_elbow_y);
      stream.next(m.right_elbow_z);
      stream.next(m.right_hand_x);
      stream.next(m.right_hand_y);
      stream.next(m.right_hand_z);
      stream.next(m.right_hip_x);
      stream.next(m.right_hip_y);
      stream.next(m.right_hip_z);
      stream.next(m.right_knee_x);
      stream.next(m.right_knee_y);
      stream.next(m.right_knee_z);
      stream.next(m.right_foot_x);
      stream.next(m.right_foot_y);
      stream.next(m.right_foot_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Skeleton_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::skeleton_tracker::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::skeleton_tracker::Skeleton_<ContainerAllocator>& v)
  {
    s << indent << "head_x: ";
    Printer<float>::stream(s, indent + "  ", v.head_x);
    s << indent << "head_y: ";
    Printer<float>::stream(s, indent + "  ", v.head_y);
    s << indent << "head_z: ";
    Printer<float>::stream(s, indent + "  ", v.head_z);
    s << indent << "head_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.head_yaw);
    s << indent << "head_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.head_pitch);
    s << indent << "neck_x: ";
    Printer<float>::stream(s, indent + "  ", v.neck_x);
    s << indent << "neck_y: ";
    Printer<float>::stream(s, indent + "  ", v.neck_y);
    s << indent << "neck_z: ";
    Printer<float>::stream(s, indent + "  ", v.neck_z);
    s << indent << "torso_x: ";
    Printer<float>::stream(s, indent + "  ", v.torso_x);
    s << indent << "torso_y: ";
    Printer<float>::stream(s, indent + "  ", v.torso_y);
    s << indent << "torso_z: ";
    Printer<float>::stream(s, indent + "  ", v.torso_z);
    s << indent << "left_shoulder_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder_x);
    s << indent << "left_shoulder_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder_y);
    s << indent << "left_shoulder_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_shoulder_z);
    s << indent << "left_elbow_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow_x);
    s << indent << "left_elbow_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow_y);
    s << indent << "left_elbow_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_elbow_z);
    s << indent << "left_hand_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_hand_x);
    s << indent << "left_hand_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_hand_y);
    s << indent << "left_hand_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_hand_z);
    s << indent << "left_hip_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_x);
    s << indent << "left_hip_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_y);
    s << indent << "left_hip_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_hip_z);
    s << indent << "left_knee_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee_x);
    s << indent << "left_knee_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee_y);
    s << indent << "left_knee_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_knee_z);
    s << indent << "left_foot_x: ";
    Printer<float>::stream(s, indent + "  ", v.left_foot_x);
    s << indent << "left_foot_y: ";
    Printer<float>::stream(s, indent + "  ", v.left_foot_y);
    s << indent << "left_foot_z: ";
    Printer<float>::stream(s, indent + "  ", v.left_foot_z);
    s << indent << "right_shoulder_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder_x);
    s << indent << "right_shoulder_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder_y);
    s << indent << "right_shoulder_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_shoulder_z);
    s << indent << "right_elbow_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow_x);
    s << indent << "right_elbow_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow_y);
    s << indent << "right_elbow_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_elbow_z);
    s << indent << "right_hand_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_hand_x);
    s << indent << "right_hand_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_hand_y);
    s << indent << "right_hand_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_hand_z);
    s << indent << "right_hip_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_x);
    s << indent << "right_hip_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_y);
    s << indent << "right_hip_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_hip_z);
    s << indent << "right_knee_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee_x);
    s << indent << "right_knee_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee_y);
    s << indent << "right_knee_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_knee_z);
    s << indent << "right_foot_x: ";
    Printer<float>::stream(s, indent + "  ", v.right_foot_x);
    s << indent << "right_foot_y: ";
    Printer<float>::stream(s, indent + "  ", v.right_foot_y);
    s << indent << "right_foot_z: ";
    Printer<float>::stream(s, indent + "  ", v.right_foot_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SKELETON_TRACKER_MESSAGE_SKELETON_H
